/**
 *
 *  Data.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Data.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::techrater;

const std::string Data::Cols::_id = "id";
const std::string Data::Cols::_statistics = "statistics";
const std::string Data::Cols::_ranks = "ranks";
const std::string Data::Cols::_settings = "settings";
const std::string Data::Cols::_keymaps = "keymaps";
const std::string Data::Cols::_touch_1 = "touch_1";
const std::string Data::Cols::_touch_2 = "touch_2";
const std::string Data::Cols::_touch_3 = "touch_3";
const std::string Data::Cols::_extra_1 = "extra_1";
const std::string Data::Cols::_extra_2 = "extra_2";
const std::string Data::Cols::_extra_3 = "extra_3";
const std::string Data::primaryKeyName = "id";
const bool Data::hasPrimaryKey = true;
const std::string Data::tableName = "data";

const std::vector<typename Data::MetaData> Data::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"statistics","std::string","text",0,0,0,0},
{"ranks","std::string","text",0,0,0,0},
{"settings","std::string","text",0,0,0,0},
{"keymaps","std::string","text",0,0,0,0},
{"touch_1","std::string","text",0,0,0,0},
{"touch_2","std::string","text",0,0,0,0},
{"touch_3","std::string","text",0,0,0,0},
{"extra_1","std::string","text",0,0,0,0},
{"extra_2","std::string","text",0,0,0,0},
{"extra_3","std::string","text",0,0,0,0}
};
const std::string &Data::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Data::Data(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["statistics"].isNull())
        {
            statistics_=std::make_shared<std::string>(r["statistics"].as<std::string>());
        }
        if(!r["ranks"].isNull())
        {
            ranks_=std::make_shared<std::string>(r["ranks"].as<std::string>());
        }
        if(!r["settings"].isNull())
        {
            settings_=std::make_shared<std::string>(r["settings"].as<std::string>());
        }
        if(!r["keymaps"].isNull())
        {
            keymaps_=std::make_shared<std::string>(r["keymaps"].as<std::string>());
        }
        if(!r["touch_1"].isNull())
        {
            touch1_=std::make_shared<std::string>(r["touch_1"].as<std::string>());
        }
        if(!r["touch_2"].isNull())
        {
            touch2_=std::make_shared<std::string>(r["touch_2"].as<std::string>());
        }
        if(!r["touch_3"].isNull())
        {
            touch3_=std::make_shared<std::string>(r["touch_3"].as<std::string>());
        }
        if(!r["extra_1"].isNull())
        {
            extra1_=std::make_shared<std::string>(r["extra_1"].as<std::string>());
        }
        if(!r["extra_2"].isNull())
        {
            extra2_=std::make_shared<std::string>(r["extra_2"].as<std::string>());
        }
        if(!r["extra_3"].isNull())
        {
            extra3_=std::make_shared<std::string>(r["extra_3"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            statistics_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            ranks_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            settings_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            keymaps_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            touch1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            touch2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            touch3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            extra1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            extra2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            extra3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Data::Data(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            statistics_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ranks_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            settings_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            keymaps_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            touch1_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            touch2_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            touch3_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            extra1_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            extra2_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            extra3_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

Data::Data(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("statistics"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["statistics"].isNull())
        {
            statistics_=std::make_shared<std::string>(pJson["statistics"].asString());
        }
    }
    if(pJson.isMember("ranks"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["ranks"].isNull())
        {
            ranks_=std::make_shared<std::string>(pJson["ranks"].asString());
        }
    }
    if(pJson.isMember("settings"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["settings"].isNull())
        {
            settings_=std::make_shared<std::string>(pJson["settings"].asString());
        }
    }
    if(pJson.isMember("keymaps"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["keymaps"].isNull())
        {
            keymaps_=std::make_shared<std::string>(pJson["keymaps"].asString());
        }
    }
    if(pJson.isMember("touch_1"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["touch_1"].isNull())
        {
            touch1_=std::make_shared<std::string>(pJson["touch_1"].asString());
        }
    }
    if(pJson.isMember("touch_2"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["touch_2"].isNull())
        {
            touch2_=std::make_shared<std::string>(pJson["touch_2"].asString());
        }
    }
    if(pJson.isMember("touch_3"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["touch_3"].isNull())
        {
            touch3_=std::make_shared<std::string>(pJson["touch_3"].asString());
        }
    }
    if(pJson.isMember("extra_1"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["extra_1"].isNull())
        {
            extra1_=std::make_shared<std::string>(pJson["extra_1"].asString());
        }
    }
    if(pJson.isMember("extra_2"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["extra_2"].isNull())
        {
            extra2_=std::make_shared<std::string>(pJson["extra_2"].asString());
        }
    }
    if(pJson.isMember("extra_3"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["extra_3"].isNull())
        {
            extra3_=std::make_shared<std::string>(pJson["extra_3"].asString());
        }
    }
}

void Data::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            statistics_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ranks_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            settings_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            keymaps_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            touch1_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            touch2_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            touch3_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            extra1_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            extra2_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            extra3_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

void Data::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("statistics"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["statistics"].isNull())
        {
            statistics_=std::make_shared<std::string>(pJson["statistics"].asString());
        }
    }
    if(pJson.isMember("ranks"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["ranks"].isNull())
        {
            ranks_=std::make_shared<std::string>(pJson["ranks"].asString());
        }
    }
    if(pJson.isMember("settings"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["settings"].isNull())
        {
            settings_=std::make_shared<std::string>(pJson["settings"].asString());
        }
    }
    if(pJson.isMember("keymaps"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["keymaps"].isNull())
        {
            keymaps_=std::make_shared<std::string>(pJson["keymaps"].asString());
        }
    }
    if(pJson.isMember("touch_1"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["touch_1"].isNull())
        {
            touch1_=std::make_shared<std::string>(pJson["touch_1"].asString());
        }
    }
    if(pJson.isMember("touch_2"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["touch_2"].isNull())
        {
            touch2_=std::make_shared<std::string>(pJson["touch_2"].asString());
        }
    }
    if(pJson.isMember("touch_3"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["touch_3"].isNull())
        {
            touch3_=std::make_shared<std::string>(pJson["touch_3"].asString());
        }
    }
    if(pJson.isMember("extra_1"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["extra_1"].isNull())
        {
            extra1_=std::make_shared<std::string>(pJson["extra_1"].asString());
        }
    }
    if(pJson.isMember("extra_2"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["extra_2"].isNull())
        {
            extra2_=std::make_shared<std::string>(pJson["extra_2"].asString());
        }
    }
    if(pJson.isMember("extra_3"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["extra_3"].isNull())
        {
            extra3_=std::make_shared<std::string>(pJson["extra_3"].asString());
        }
    }
}

const int64_t &Data::getValueOfId() const noexcept
{
    const static int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Data::getId() const noexcept
{
    return id_;
}
void Data::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Data::PrimaryKeyType & Data::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Data::getValueOfStatistics() const noexcept
{
    const static std::string defaultValue = std::string();
    if(statistics_)
        return *statistics_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getStatistics() const noexcept
{
    return statistics_;
}
void Data::setStatistics(const std::string &pStatistics) noexcept
{
    statistics_ = std::make_shared<std::string>(pStatistics);
    dirtyFlag_[1] = true;
}
void Data::setStatistics(std::string &&pStatistics) noexcept
{
    statistics_ = std::make_shared<std::string>(std::move(pStatistics));
    dirtyFlag_[1] = true;
}
void Data::setStatisticsToNull() noexcept
{
    statistics_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Data::getValueOfRanks() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ranks_)
        return *ranks_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getRanks() const noexcept
{
    return ranks_;
}
void Data::setRanks(const std::string &pRanks) noexcept
{
    ranks_ = std::make_shared<std::string>(pRanks);
    dirtyFlag_[2] = true;
}
void Data::setRanks(std::string &&pRanks) noexcept
{
    ranks_ = std::make_shared<std::string>(std::move(pRanks));
    dirtyFlag_[2] = true;
}
void Data::setRanksToNull() noexcept
{
    ranks_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Data::getValueOfSettings() const noexcept
{
    const static std::string defaultValue = std::string();
    if(settings_)
        return *settings_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getSettings() const noexcept
{
    return settings_;
}
void Data::setSettings(const std::string &pSettings) noexcept
{
    settings_ = std::make_shared<std::string>(pSettings);
    dirtyFlag_[3] = true;
}
void Data::setSettings(std::string &&pSettings) noexcept
{
    settings_ = std::make_shared<std::string>(std::move(pSettings));
    dirtyFlag_[3] = true;
}
void Data::setSettingsToNull() noexcept
{
    settings_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Data::getValueOfKeymaps() const noexcept
{
    const static std::string defaultValue = std::string();
    if(keymaps_)
        return *keymaps_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getKeymaps() const noexcept
{
    return keymaps_;
}
void Data::setKeymaps(const std::string &pKeymaps) noexcept
{
    keymaps_ = std::make_shared<std::string>(pKeymaps);
    dirtyFlag_[4] = true;
}
void Data::setKeymaps(std::string &&pKeymaps) noexcept
{
    keymaps_ = std::make_shared<std::string>(std::move(pKeymaps));
    dirtyFlag_[4] = true;
}
void Data::setKeymapsToNull() noexcept
{
    keymaps_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Data::getValueOfTouch1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(touch1_)
        return *touch1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getTouch1() const noexcept
{
    return touch1_;
}
void Data::setTouch1(const std::string &pTouch1) noexcept
{
    touch1_ = std::make_shared<std::string>(pTouch1);
    dirtyFlag_[5] = true;
}
void Data::setTouch1(std::string &&pTouch1) noexcept
{
    touch1_ = std::make_shared<std::string>(std::move(pTouch1));
    dirtyFlag_[5] = true;
}
void Data::setTouch1ToNull() noexcept
{
    touch1_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Data::getValueOfTouch2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(touch2_)
        return *touch2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getTouch2() const noexcept
{
    return touch2_;
}
void Data::setTouch2(const std::string &pTouch2) noexcept
{
    touch2_ = std::make_shared<std::string>(pTouch2);
    dirtyFlag_[6] = true;
}
void Data::setTouch2(std::string &&pTouch2) noexcept
{
    touch2_ = std::make_shared<std::string>(std::move(pTouch2));
    dirtyFlag_[6] = true;
}
void Data::setTouch2ToNull() noexcept
{
    touch2_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Data::getValueOfTouch3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(touch3_)
        return *touch3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getTouch3() const noexcept
{
    return touch3_;
}
void Data::setTouch3(const std::string &pTouch3) noexcept
{
    touch3_ = std::make_shared<std::string>(pTouch3);
    dirtyFlag_[7] = true;
}
void Data::setTouch3(std::string &&pTouch3) noexcept
{
    touch3_ = std::make_shared<std::string>(std::move(pTouch3));
    dirtyFlag_[7] = true;
}
void Data::setTouch3ToNull() noexcept
{
    touch3_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Data::getValueOfExtra1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extra1_)
        return *extra1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getExtra1() const noexcept
{
    return extra1_;
}
void Data::setExtra1(const std::string &pExtra1) noexcept
{
    extra1_ = std::make_shared<std::string>(pExtra1);
    dirtyFlag_[8] = true;
}
void Data::setExtra1(std::string &&pExtra1) noexcept
{
    extra1_ = std::make_shared<std::string>(std::move(pExtra1));
    dirtyFlag_[8] = true;
}
void Data::setExtra1ToNull() noexcept
{
    extra1_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Data::getValueOfExtra2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extra2_)
        return *extra2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getExtra2() const noexcept
{
    return extra2_;
}
void Data::setExtra2(const std::string &pExtra2) noexcept
{
    extra2_ = std::make_shared<std::string>(pExtra2);
    dirtyFlag_[9] = true;
}
void Data::setExtra2(std::string &&pExtra2) noexcept
{
    extra2_ = std::make_shared<std::string>(std::move(pExtra2));
    dirtyFlag_[9] = true;
}
void Data::setExtra2ToNull() noexcept
{
    extra2_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Data::getValueOfExtra3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extra3_)
        return *extra3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Data::getExtra3() const noexcept
{
    return extra3_;
}
void Data::setExtra3(const std::string &pExtra3) noexcept
{
    extra3_ = std::make_shared<std::string>(pExtra3);
    dirtyFlag_[10] = true;
}
void Data::setExtra3(std::string &&pExtra3) noexcept
{
    extra3_ = std::make_shared<std::string>(std::move(pExtra3));
    dirtyFlag_[10] = true;
}
void Data::setExtra3ToNull() noexcept
{
    extra3_.reset();
    dirtyFlag_[10] = true;
}

void Data::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Data::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "statistics",
        "ranks",
        "settings",
        "keymaps",
        "touch_1",
        "touch_2",
        "touch_3",
        "extra_1",
        "extra_2",
        "extra_3"
    };
    return inCols;
}

void Data::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getStatistics())
        {
            binder << getValueOfStatistics();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRanks())
        {
            binder << getValueOfRanks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSettings())
        {
            binder << getValueOfSettings();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getKeymaps())
        {
            binder << getValueOfKeymaps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTouch1())
        {
            binder << getValueOfTouch1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTouch2())
        {
            binder << getValueOfTouch2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTouch3())
        {
            binder << getValueOfTouch3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getExtra1())
        {
            binder << getValueOfExtra1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExtra2())
        {
            binder << getValueOfExtra2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getExtra3())
        {
            binder << getValueOfExtra3();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Data::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void Data::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getStatistics())
        {
            binder << getValueOfStatistics();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRanks())
        {
            binder << getValueOfRanks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSettings())
        {
            binder << getValueOfSettings();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getKeymaps())
        {
            binder << getValueOfKeymaps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getTouch1())
        {
            binder << getValueOfTouch1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTouch2())
        {
            binder << getValueOfTouch2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTouch3())
        {
            binder << getValueOfTouch3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getExtra1())
        {
            binder << getValueOfExtra1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getExtra2())
        {
            binder << getValueOfExtra2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getExtra3())
        {
            binder << getValueOfExtra3();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Data::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getStatistics())
    {
        ret["statistics"]=getValueOfStatistics();
    }
    else
    {
        ret["statistics"]=Json::Value();
    }
    if(getRanks())
    {
        ret["ranks"]=getValueOfRanks();
    }
    else
    {
        ret["ranks"]=Json::Value();
    }
    if(getSettings())
    {
        ret["settings"]=getValueOfSettings();
    }
    else
    {
        ret["settings"]=Json::Value();
    }
    if(getKeymaps())
    {
        ret["keymaps"]=getValueOfKeymaps();
    }
    else
    {
        ret["keymaps"]=Json::Value();
    }
    if(getTouch1())
    {
        ret["touch_1"]=getValueOfTouch1();
    }
    else
    {
        ret["touch_1"]=Json::Value();
    }
    if(getTouch2())
    {
        ret["touch_2"]=getValueOfTouch2();
    }
    else
    {
        ret["touch_2"]=Json::Value();
    }
    if(getTouch3())
    {
        ret["touch_3"]=getValueOfTouch3();
    }
    else
    {
        ret["touch_3"]=Json::Value();
    }
    if(getExtra1())
    {
        ret["extra_1"]=getValueOfExtra1();
    }
    else
    {
        ret["extra_1"]=Json::Value();
    }
    if(getExtra2())
    {
        ret["extra_2"]=getValueOfExtra2();
    }
    else
    {
        ret["extra_2"]=Json::Value();
    }
    if(getExtra3())
    {
        ret["extra_3"]=getValueOfExtra3();
    }
    else
    {
        ret["extra_3"]=Json::Value();
    }
    return ret;
}

Json::Value Data::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getStatistics())
            {
                ret[pMasqueradingVector[1]]=getValueOfStatistics();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRanks())
            {
                ret[pMasqueradingVector[2]]=getValueOfRanks();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSettings())
            {
                ret[pMasqueradingVector[3]]=getValueOfSettings();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getKeymaps())
            {
                ret[pMasqueradingVector[4]]=getValueOfKeymaps();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getTouch1())
            {
                ret[pMasqueradingVector[5]]=getValueOfTouch1();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTouch2())
            {
                ret[pMasqueradingVector[6]]=getValueOfTouch2();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTouch3())
            {
                ret[pMasqueradingVector[7]]=getValueOfTouch3();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getExtra1())
            {
                ret[pMasqueradingVector[8]]=getValueOfExtra1();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getExtra2())
            {
                ret[pMasqueradingVector[9]]=getValueOfExtra2();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getExtra3())
            {
                ret[pMasqueradingVector[10]]=getValueOfExtra3();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getStatistics())
    {
        ret["statistics"]=getValueOfStatistics();
    }
    else
    {
        ret["statistics"]=Json::Value();
    }
    if(getRanks())
    {
        ret["ranks"]=getValueOfRanks();
    }
    else
    {
        ret["ranks"]=Json::Value();
    }
    if(getSettings())
    {
        ret["settings"]=getValueOfSettings();
    }
    else
    {
        ret["settings"]=Json::Value();
    }
    if(getKeymaps())
    {
        ret["keymaps"]=getValueOfKeymaps();
    }
    else
    {
        ret["keymaps"]=Json::Value();
    }
    if(getTouch1())
    {
        ret["touch_1"]=getValueOfTouch1();
    }
    else
    {
        ret["touch_1"]=Json::Value();
    }
    if(getTouch2())
    {
        ret["touch_2"]=getValueOfTouch2();
    }
    else
    {
        ret["touch_2"]=Json::Value();
    }
    if(getTouch3())
    {
        ret["touch_3"]=getValueOfTouch3();
    }
    else
    {
        ret["touch_3"]=Json::Value();
    }
    if(getExtra1())
    {
        ret["extra_1"]=getValueOfExtra1();
    }
    else
    {
        ret["extra_1"]=Json::Value();
    }
    if(getExtra2())
    {
        ret["extra_2"]=getValueOfExtra2();
    }
    else
    {
        ret["extra_2"]=Json::Value();
    }
    if(getExtra3())
    {
        ret["extra_3"]=getValueOfExtra3();
    }
    else
    {
        ret["extra_3"]=Json::Value();
    }
    return ret;
}

bool Data::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("statistics"))
    {
        if(!validJsonOfField(1, "statistics", pJson["statistics"], err, true))
            return false;
    }
    if(pJson.isMember("ranks"))
    {
        if(!validJsonOfField(2, "ranks", pJson["ranks"], err, true))
            return false;
    }
    if(pJson.isMember("settings"))
    {
        if(!validJsonOfField(3, "settings", pJson["settings"], err, true))
            return false;
    }
    if(pJson.isMember("keymaps"))
    {
        if(!validJsonOfField(4, "keymaps", pJson["keymaps"], err, true))
            return false;
    }
    if(pJson.isMember("touch_1"))
    {
        if(!validJsonOfField(5, "touch_1", pJson["touch_1"], err, true))
            return false;
    }
    if(pJson.isMember("touch_2"))
    {
        if(!validJsonOfField(6, "touch_2", pJson["touch_2"], err, true))
            return false;
    }
    if(pJson.isMember("touch_3"))
    {
        if(!validJsonOfField(7, "touch_3", pJson["touch_3"], err, true))
            return false;
    }
    if(pJson.isMember("extra_1"))
    {
        if(!validJsonOfField(8, "extra_1", pJson["extra_1"], err, true))
            return false;
    }
    if(pJson.isMember("extra_2"))
    {
        if(!validJsonOfField(9, "extra_2", pJson["extra_2"], err, true))
            return false;
    }
    if(pJson.isMember("extra_3"))
    {
        if(!validJsonOfField(10, "extra_3", pJson["extra_3"], err, true))
            return false;
    }
    return true;
}
bool Data::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Data::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("statistics"))
    {
        if(!validJsonOfField(1, "statistics", pJson["statistics"], err, false))
            return false;
    }
    if(pJson.isMember("ranks"))
    {
        if(!validJsonOfField(2, "ranks", pJson["ranks"], err, false))
            return false;
    }
    if(pJson.isMember("settings"))
    {
        if(!validJsonOfField(3, "settings", pJson["settings"], err, false))
            return false;
    }
    if(pJson.isMember("keymaps"))
    {
        if(!validJsonOfField(4, "keymaps", pJson["keymaps"], err, false))
            return false;
    }
    if(pJson.isMember("touch_1"))
    {
        if(!validJsonOfField(5, "touch_1", pJson["touch_1"], err, false))
            return false;
    }
    if(pJson.isMember("touch_2"))
    {
        if(!validJsonOfField(6, "touch_2", pJson["touch_2"], err, false))
            return false;
    }
    if(pJson.isMember("touch_3"))
    {
        if(!validJsonOfField(7, "touch_3", pJson["touch_3"], err, false))
            return false;
    }
    if(pJson.isMember("extra_1"))
    {
        if(!validJsonOfField(8, "extra_1", pJson["extra_1"], err, false))
            return false;
    }
    if(pJson.isMember("extra_2"))
    {
        if(!validJsonOfField(9, "extra_2", pJson["extra_2"], err, false))
            return false;
    }
    if(pJson.isMember("extra_3"))
    {
        if(!validJsonOfField(10, "extra_3", pJson["extra_3"], err, false))
            return false;
    }
    return true;
}
bool Data::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Data::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
