/**
 *
 *  Data.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace techrater
{

class Data
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _statistics;
        static const std::string _ranks;
        static const std::string _settings;
        static const std::string _keymaps;
        static const std::string _touch_1;
        static const std::string _touch_2;
        static const std::string _touch_3;
        static const std::string _extra_1;
        static const std::string _extra_2;
        static const std::string _extra_3;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Data(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Data(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Data(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Data() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int64_t &pId) noexcept;

    /**  For column statistics  */
    ///Get the value of the column statistics, returns the default value if the column is null
    const std::string &getValueOfStatistics() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatistics() const noexcept;
    ///Set the value of the column statistics
    void setStatistics(const std::string &pStatistics) noexcept;
    void setStatistics(std::string &&pStatistics) noexcept;
    void setStatisticsToNull() noexcept;

    /**  For column ranks  */
    ///Get the value of the column ranks, returns the default value if the column is null
    const std::string &getValueOfRanks() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRanks() const noexcept;
    ///Set the value of the column ranks
    void setRanks(const std::string &pRanks) noexcept;
    void setRanks(std::string &&pRanks) noexcept;
    void setRanksToNull() noexcept;

    /**  For column settings  */
    ///Get the value of the column settings, returns the default value if the column is null
    const std::string &getValueOfSettings() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSettings() const noexcept;
    ///Set the value of the column settings
    void setSettings(const std::string &pSettings) noexcept;
    void setSettings(std::string &&pSettings) noexcept;
    void setSettingsToNull() noexcept;

    /**  For column keymaps  */
    ///Get the value of the column keymaps, returns the default value if the column is null
    const std::string &getValueOfKeymaps() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKeymaps() const noexcept;
    ///Set the value of the column keymaps
    void setKeymaps(const std::string &pKeymaps) noexcept;
    void setKeymaps(std::string &&pKeymaps) noexcept;
    void setKeymapsToNull() noexcept;

    /**  For column touch_1  */
    ///Get the value of the column touch_1, returns the default value if the column is null
    const std::string &getValueOfTouch1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTouch1() const noexcept;
    ///Set the value of the column touch_1
    void setTouch1(const std::string &pTouch1) noexcept;
    void setTouch1(std::string &&pTouch1) noexcept;
    void setTouch1ToNull() noexcept;

    /**  For column touch_2  */
    ///Get the value of the column touch_2, returns the default value if the column is null
    const std::string &getValueOfTouch2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTouch2() const noexcept;
    ///Set the value of the column touch_2
    void setTouch2(const std::string &pTouch2) noexcept;
    void setTouch2(std::string &&pTouch2) noexcept;
    void setTouch2ToNull() noexcept;

    /**  For column touch_3  */
    ///Get the value of the column touch_3, returns the default value if the column is null
    const std::string &getValueOfTouch3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTouch3() const noexcept;
    ///Set the value of the column touch_3
    void setTouch3(const std::string &pTouch3) noexcept;
    void setTouch3(std::string &&pTouch3) noexcept;
    void setTouch3ToNull() noexcept;

    /**  For column extra_1  */
    ///Get the value of the column extra_1, returns the default value if the column is null
    const std::string &getValueOfExtra1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExtra1() const noexcept;
    ///Set the value of the column extra_1
    void setExtra1(const std::string &pExtra1) noexcept;
    void setExtra1(std::string &&pExtra1) noexcept;
    void setExtra1ToNull() noexcept;

    /**  For column extra_2  */
    ///Get the value of the column extra_2, returns the default value if the column is null
    const std::string &getValueOfExtra2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExtra2() const noexcept;
    ///Set the value of the column extra_2
    void setExtra2(const std::string &pExtra2) noexcept;
    void setExtra2(std::string &&pExtra2) noexcept;
    void setExtra2ToNull() noexcept;

    /**  For column extra_3  */
    ///Get the value of the column extra_3, returns the default value if the column is null
    const std::string &getValueOfExtra3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExtra3() const noexcept;
    ///Set the value of the column extra_3
    void setExtra3(const std::string &pExtra3) noexcept;
    void setExtra3(std::string &&pExtra3) noexcept;
    void setExtra3ToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 11;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Data>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Data>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int64_t> id_;
    std::shared_ptr<std::string> statistics_;
    std::shared_ptr<std::string> ranks_;
    std::shared_ptr<std::string> settings_;
    std::shared_ptr<std::string> keymaps_;
    std::shared_ptr<std::string> touch1_;
    std::shared_ptr<std::string> touch2_;
    std::shared_ptr<std::string> touch3_;
    std::shared_ptr<std::string> extra1_;
    std::shared_ptr<std::string> extra2_;
    std::shared_ptr<std::string> extra3_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[11]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = $1";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = $1";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "statistics,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "ranks,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "settings,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "keymaps,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "touch_1,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "touch_2,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "touch_3,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "extra_1,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "extra_2,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "extra_3,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        int placeholder=1;
        char placeholderStr[64];
        size_t n=0;
        sql +="default,";
        if(dirtyFlag_[1])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[2])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[3])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[4])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[5])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[6])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[7])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[8])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[9])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(dirtyFlag_[10])
        {
            n = sprintf(placeholderStr,"$%d,",placeholder++);
            sql.append(placeholderStr, n);
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        if(needSelection)
        {
            sql.append(") returning *");
        }
        else
        {
            sql.append(1, ')');
        }
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace techrater
} // namespace drogon_model
